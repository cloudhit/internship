#!/usr/bin/python
import numpy as np
import scipy.sparse
import pickle
import xgboost as xgb

### simple example
# load file from text file, also binary buffer generated by xgboost
dtest = xgb.DMatrix('../data/data.txt.test')
dtrain = xgb.DMatrix('../data/data.txt.train')


# specify parameters via map, definition are same as c++ version
param = {'max_depth':30, 'eta':0.3, 'silent':1, 'objective':'reg:linear', 'nthread':4 }
# specify validations set to watch performance
watchlist  = [(dtest,'eval'), (dtrain,'train')]
num_round = 5
bst = xgb.train(param, dtrain, num_round, watchlist)

# this is prediction
preds = bst.predict(dtest)
labels = dtest.get_label()
#print ('error=%f' % ( sum(1 for i in range(len(preds)) if int(preds[i]>0.5)!=labels[i]) /float(len(preds))))
bst.save_model('0001.model')
# dump model
bst.dump_model('dump.raw.txt')
# dump model with feature map
bst.dump_model('dump.nice.txt','../data/featmap.txt')

# save dmatrix into binary buffer
#dtest.save_binary('dtest.buffer')



